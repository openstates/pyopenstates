{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyopenstates \u00b6 A Python client for the Open States API v3 . Source: https://github.com/openstates/pyopenstates/ Documentation: https://openstates.github.io/pyopenstates/ Issues: https://github.com/openstates/pyopenstates/issues Note: This library was recently updated to support Open States API v3, documentation & coverage is a bit behind, but we wanted to get a release out. Feel free to contribute issues and/or fixes. Features \u00b6 Compatible with Python 3.7+ Automatic conversion of string dates and timestamps to datetime objects. Tested releases. Set API Key via environment variable or in code. API Keys \u00b6 To use the Open States API you must obtain an API Key . Once you have your key you can use it with this library by setting the OPENSTATES_API_KEY environment variable or calling pyopenstates.set_api_key . About Open States \u00b6 Open States strives to improve civic engagement at the state level by providing data and tools regarding state legislatures. We aim to serve members of the public, activist groups, journalists, and researchers with better data on what is happening in their state capital, and to provide tools to reduce barriers to participation and increase engagement. Open States aggregates legislative information from all 50 states, Washington, D.C., and Puerto Rico. This information is then standardized, cleaned, and published to the public via OpenStates.org, a powerful API, and bulk downloads. OpenStates.org enables individuals to find out who represents them, look up information on an important bill that\u2019s been in the news, discover how their representatives are voting, or just stay current with what is happening in their state. Additionally, our API and bulk downloads see millions of hits every month from advocacy organizations, journalists, researchers, and many others. Legislative data is collected from official sources, linked at the bottom of relevant pages. In general bill & vote data is collected multiple times a day via our scrapers while legislator data is curated by our team & volunteers like you.","title":"pyopenstates"},{"location":"#pyopenstates","text":"A Python client for the Open States API v3 . Source: https://github.com/openstates/pyopenstates/ Documentation: https://openstates.github.io/pyopenstates/ Issues: https://github.com/openstates/pyopenstates/issues Note: This library was recently updated to support Open States API v3, documentation & coverage is a bit behind, but we wanted to get a release out. Feel free to contribute issues and/or fixes.","title":"pyopenstates"},{"location":"#features","text":"Compatible with Python 3.7+ Automatic conversion of string dates and timestamps to datetime objects. Tested releases. Set API Key via environment variable or in code.","title":"Features"},{"location":"#api-keys","text":"To use the Open States API you must obtain an API Key . Once you have your key you can use it with this library by setting the OPENSTATES_API_KEY environment variable or calling pyopenstates.set_api_key .","title":"API Keys"},{"location":"#about-open-states","text":"Open States strives to improve civic engagement at the state level by providing data and tools regarding state legislatures. We aim to serve members of the public, activist groups, journalists, and researchers with better data on what is happening in their state capital, and to provide tools to reduce barriers to participation and increase engagement. Open States aggregates legislative information from all 50 states, Washington, D.C., and Puerto Rico. This information is then standardized, cleaned, and published to the public via OpenStates.org, a powerful API, and bulk downloads. OpenStates.org enables individuals to find out who represents them, look up information on an important bill that\u2019s been in the news, discover how their representatives are voting, or just stay current with what is happening in their state. Additionally, our API and bulk downloads see millions of hits every month from advocacy organizations, journalists, researchers, and many others. Legislative data is collected from official sources, linked at the bottom of relevant pages. In general bill & vote data is collected multiple times a day via our scrapers while legislator data is curated by our team & volunteers like you.","title":"About Open States"},{"location":"changelog/","text":"Changelog \u00b6 2.3.1 - 5 January 2021 \u00b6 fix for multi-value parameters like include 2.3.0 - 4 January 2021 \u00b6 brought parameters for bill methods in line with API v3 bugfix for people downloads thanks to Alex Obaseki! 2.2.0 - 28 December 2021 \u00b6 added VoteCounts to downloads.FileType enum for downloading vote count files added People to downloads.FileType enum for downloading people files added support for include= parameter for get_metadata added proper error handling to pyopenstates.downloads fetch call 2.1.0 - 17 November 2021 \u00b6 added pyopenstates.downloads to interact with Open States' bulk data 2.0.0 - 15 November 2021 \u00b6 updated library to support API v3 & modernize Python tooling 1.2.0 - 15 May 2018 \u00b6 last release targeting API v1 detailed changelog was not kept before this","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#231-5-january-2021","text":"fix for multi-value parameters like include","title":"2.3.1 - 5 January 2021"},{"location":"changelog/#230-4-january-2021","text":"brought parameters for bill methods in line with API v3 bugfix for people downloads thanks to Alex Obaseki!","title":"2.3.0 - 4 January 2021"},{"location":"changelog/#220-28-december-2021","text":"added VoteCounts to downloads.FileType enum for downloading vote count files added People to downloads.FileType enum for downloading people files added support for include= parameter for get_metadata added proper error handling to pyopenstates.downloads fetch call","title":"2.2.0 - 28 December 2021"},{"location":"changelog/#210-17-november-2021","text":"added pyopenstates.downloads to interact with Open States' bulk data","title":"2.1.0 - 17 November 2021"},{"location":"changelog/#200-15-november-2021","text":"updated library to support API v3 & modernize Python tooling","title":"2.0.0 - 15 November 2021"},{"location":"changelog/#120-15-may-2018","text":"last release targeting API v1 detailed changelog was not kept before this","title":"1.2.0 - 15 May 2018"},{"location":"downloads/","text":"Downloads \u00b6 pyopenstates also has some basic methods to help you deal with Open States' bulk data. See https://openstates.org/data/session-csv/ for more information. FileType ( Enum ) \u00b6 enum specifying the various types of files available from the CSV bulk data: Bills Actions Sources Sponsorships Versions VersionLinks Votes VotePeople VoteSources Organizations People load_csv ( state , session , file_type ) \u00b6 Returns an instantiated csv.DictReader to iterate over the requested file. load_merged_dataframe ( state , session , which ) \u00b6 Returns a populated pandas.DataFrame with the requested content. FileType.Actions , FileType.Sources , FileType.Versions , FileType.Sponsorships will be merged against a FileType.Bills dataframe. FileType.VersionLinks will be merged against both a FileType.Versions and FileType.Bills dataframe. FileType.VotePeople , FileType.VoteCounts , and FileType.VoteSources will be merged against a FileType.Votes dataframe. Other types will be returned as-is.","title":"Downloads"},{"location":"downloads/#downloads","text":"pyopenstates also has some basic methods to help you deal with Open States' bulk data. See https://openstates.org/data/session-csv/ for more information.","title":"Downloads"},{"location":"downloads/#pyopenstates.downloads.FileType","text":"enum specifying the various types of files available from the CSV bulk data: Bills Actions Sources Sponsorships Versions VersionLinks Votes VotePeople VoteSources Organizations People","title":"FileType"},{"location":"downloads/#pyopenstates.downloads.load_csv","text":"Returns an instantiated csv.DictReader to iterate over the requested file.","title":"load_csv()"},{"location":"downloads/#pyopenstates.downloads.load_merged_dataframe","text":"Returns a populated pandas.DataFrame with the requested content. FileType.Actions , FileType.Sources , FileType.Versions , FileType.Sponsorships will be merged against a FileType.Bills dataframe. FileType.VersionLinks will be merged against both a FileType.Versions and FileType.Bills dataframe. FileType.VotePeople , FileType.VoteCounts , and FileType.VoteSources will be merged against a FileType.Votes dataframe. Other types will be returned as-is.","title":"load_merged_dataframe()"},{"location":"reference/","text":"API Reference \u00b6 Jurisdictions \u00b6 get_metadata ( state = None , include = None , fields = None ) \u00b6 Returns a list of all states with data available, and basic metadata about their status. Can also get detailed metadata for a particular state. Args: state: The abbreviation of state to get detailed metadata on, or leave as None to get high-level metadata on all states. include: Additional includes. fields: An optional list of fields to return; returns all fields by default Returns: Dict: The requested :ref: Metadata as a dictionary search_districts ( state , chamber ) \u00b6 Search for districts Args: state: The state to search in chamber: the upper or lower legislative chamber fields: Optionally specify a custom list of fields to return Returns: A list of matching :ref: District dictionaries People \u00b6 get_legislator ( leg_id ) \u00b6 Gets a legislator's details Args: leg_id: The Legislator's Open States ID fields: An optional custom list of fields to return Returns: The requested :ref: Legislator details as a dictionary locate_legislators ( lat , lng , fields = None ) \u00b6 Returns a list of legislators for the given latitude/longitude coordinates Args: lat: Latitude long: Longitude fields: An optional custom list of fields to return Returns: A list of matching :ref: Legislator dictionaries search_legislators ( jurisdiction = None , name = None , id_ = None , org_classification = None , district = None , include = None ) \u00b6 Search for legislators. Returns: A list of matching :ref: Legislator dictionaries Bills \u00b6 get_bill ( uid = None , state = None , session = None , bill_id = None , include = None ) \u00b6 Returns details of a specific bill Can be identified by the Open States unique bill id (uid), or by specifying the state, session, and legislative bill ID Args: uid: The Open States unique bill ID state: The postal code of the state session: The legislative session (see state metadata) bill_id: Yhe legislative bill ID (e.g. HR 42 ) **kwargs: Optional keyword argument options, such as fields , which specifies the fields to return Returns: The :ref: Bill details as a dictionary search_bills ( jurisdiction = None , identifier = None , session = None , chamber = None , classification = None , subject = None , updated_since = None , created_since = None , action_since = None , sponsor = None , sponsor_classification = None , q = None , sort = None , include = None , page = 1 , per_page = 10 , all_pages = True , state = None ) \u00b6 Find bills matching a given set of filters For a list of each field, example values, etc. see https://v3.openstates.org/docs#/bills/bills_search_bills_get Utilities \u00b6 set_api_key ( apikey ) \u00b6 Sets API key. Can also be set as OPENSTATES_API_KEY environment variable. set_user_agent ( user_agent ) \u00b6 Appends a custom string to the default User-Agent string (e.g. pyopenstates/__version__ user_agent ) Exceptions \u00b6 APIError ( RuntimeError ) \u00b6 Raised when the Open States API returns an error NotFound ( APIError ) \u00b6 Raised when the API cannot find the requested object","title":"API Reference"},{"location":"reference/#api-reference","text":"","title":"API Reference"},{"location":"reference/#jurisdictions","text":"","title":"Jurisdictions"},{"location":"reference/#pyopenstates.core.get_metadata","text":"Returns a list of all states with data available, and basic metadata about their status. Can also get detailed metadata for a particular state. Args: state: The abbreviation of state to get detailed metadata on, or leave as None to get high-level metadata on all states. include: Additional includes. fields: An optional list of fields to return; returns all fields by default Returns: Dict: The requested :ref: Metadata as a dictionary","title":"get_metadata()"},{"location":"reference/#pyopenstates.core.search_districts","text":"Search for districts Args: state: The state to search in chamber: the upper or lower legislative chamber fields: Optionally specify a custom list of fields to return Returns: A list of matching :ref: District dictionaries","title":"search_districts()"},{"location":"reference/#people","text":"","title":"People"},{"location":"reference/#pyopenstates.core.get_legislator","text":"Gets a legislator's details Args: leg_id: The Legislator's Open States ID fields: An optional custom list of fields to return Returns: The requested :ref: Legislator details as a dictionary","title":"get_legislator()"},{"location":"reference/#pyopenstates.core.locate_legislators","text":"Returns a list of legislators for the given latitude/longitude coordinates Args: lat: Latitude long: Longitude fields: An optional custom list of fields to return Returns: A list of matching :ref: Legislator dictionaries","title":"locate_legislators()"},{"location":"reference/#pyopenstates.core.search_legislators","text":"Search for legislators. Returns: A list of matching :ref: Legislator dictionaries","title":"search_legislators()"},{"location":"reference/#bills","text":"","title":"Bills"},{"location":"reference/#pyopenstates.core.get_bill","text":"Returns details of a specific bill Can be identified by the Open States unique bill id (uid), or by specifying the state, session, and legislative bill ID Args: uid: The Open States unique bill ID state: The postal code of the state session: The legislative session (see state metadata) bill_id: Yhe legislative bill ID (e.g. HR 42 ) **kwargs: Optional keyword argument options, such as fields , which specifies the fields to return Returns: The :ref: Bill details as a dictionary","title":"get_bill()"},{"location":"reference/#pyopenstates.core.search_bills","text":"Find bills matching a given set of filters For a list of each field, example values, etc. see https://v3.openstates.org/docs#/bills/bills_search_bills_get","title":"search_bills()"},{"location":"reference/#utilities","text":"","title":"Utilities"},{"location":"reference/#pyopenstates.core.set_api_key","text":"Sets API key. Can also be set as OPENSTATES_API_KEY environment variable.","title":"set_api_key()"},{"location":"reference/#pyopenstates.core.set_user_agent","text":"Appends a custom string to the default User-Agent string (e.g. pyopenstates/__version__ user_agent )","title":"set_user_agent()"},{"location":"reference/#exceptions","text":"","title":"Exceptions"},{"location":"reference/#pyopenstates.core.APIError","text":"Raised when the Open States API returns an error","title":"APIError"},{"location":"reference/#pyopenstates.core.NotFound","text":"Raised when the API cannot find the requested object","title":"NotFound"}]}